<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%black(server-) 时间:%red(%d{yyyy-MM-dd HH:mm:ss}) 线程名:%green([%thread]) 级别:%highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <appender name="WarnDown" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
        所以我们使用下面的策略，可以避免输出 Error 的日志-->
        <encoder>
            <pattern>%black(server-) 时间:%red(%d{yyyy-MM-dd HH:mm:ss}) 线程名:%green([%thread]) 级别:%highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤 Error-->
            <level>ERROR</level>
            <!--匹配到就禁止-->
            <onMatch>DENY</onMatch>
            <!--没有匹配到就允许-->
            <onMismatch>ACCEPT</onMismatch>
        </filter>
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
        的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
        <File>/data/logs/springboot/debug.springboot.log</File>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>/data/logs/springboot/debug.springboot.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!--只保留最近90天的日志-->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <maxFileSize>100MB</maxFileSize>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
    </appender>
    <appender name="ErrorUp" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>%black(server-) 时间:%red(%d{yyyy-MM-dd HH:mm:ss}) 线程名:%green([%thread]) 级别:%highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>Error</level>
        </filter>
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
        的日志改名为今天的日期。即，<File>     的日志都是当天的。
        -->
        <File>/data/logs/springboot/error.springboot.log</File>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>/data/logs/springboot/error.springboot.log.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!--只保留最近90天的日志-->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <maxFileSize>100MB</maxFileSize>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <appender name="costTime" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>%black(server-) 时间:%red(%d{yyyy-MM-dd HH:mm:ss}) 线程名:%green([%thread]) 级别:%highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
        的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
        <File>/data/logs/springboot/costTime/info.log</File>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>/data/logs/springboot/costTime/info.log.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!--只保留最近90天的日志-->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <maxFileSize>100MB</maxFileSize>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
    </appender>
    <appender name="springbootLogger" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>%black(server-) 时间:%red(%d{yyyy-MM-dd HH:mm:ss}) 线程名:%green([%thread]) 级别:%highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
        的日志改名为今天的日期。即，<File> 的日志都是当天的。1
        -->
        <File>/data/logs/springboot/springbootLogger/info.log</File>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>/data/logs/springboot/springbootLogger/info.log.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!--只保留最近90天的日志-->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <maxFileSize>100MB</maxFileSize>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
    </appender>

<!--    <logger name="springbootLogger" level="INFO" additivity="false">-->
<!--        <appender-ref ref="springbootLogger"/>-->
<!--    </logger>-->

<!--    <logger name="costTime" level="INFO" additivity="false">-->
<!--        <appender-ref ref="costTime"/>-->
<!--    </logger>-->

    <root level="debug">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="WarnDown"/>
        <appender-ref ref="ErrorUp"/>
    </root>


</configuration>
